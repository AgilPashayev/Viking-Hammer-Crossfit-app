const express = require('express');
const cors = require('cors');
const path = require('path');

const app = express();
const PORT = process.env.PORT || 4001;

// Middleware
app.use(cors());
app.use(express.json());

// Mock data
const mockUsers = [
  {
    id: 'user1',
    email: 'john.viking@example.com',
    firstName: 'John',
    lastName: 'Viking',
    phone: '+994501234567',
    countryCode: '+994',
    dateOfBirth: '1990-05-15',
    membershipType: 'Viking Warrior Pro',
    joinDate: '2023-01-15',
    isActive: true,
  },
  {
    id: 'user2',
    email: 'sarah.warrior@example.com',
    firstName: 'Sarah',
    lastName: 'Warrior',
    phone: '+994501234568',
    countryCode: '+994',
    dateOfBirth: '1995-08-22',
    membershipType: 'Monthly Unlimited',
    joinDate: '2023-03-20',
    isActive: true,
  },
];

const mockCheckIns = [
  {
    id: 'checkin1',
    userId: 'user1',
    userName: 'John Viking',
    timestamp: new Date().toISOString(),
    location: 'Main Entrance',
    membershipStatus: 'Viking Warrior Pro',
  },
];

// Mock membership history data
const mockMembershipHistory = {
  user1: [
    {
      id: 'mem1',
      user_id: 'user1',
      plan_name: 'Viking Warrior Pro',
      plan_type: 'premium',
      start_date: '2025-01-15',
      end_date: null,
      duration_months: null,
      status: 'active',
      amount: 79.99,
      currency: 'USD',
      payment_method: 'credit_card',
      payment_status: 'paid',
      renewal_type: 'monthly',
      auto_renew: true,
      next_billing_date: '2025-11-15',
      class_limit: null,
      created_at: '2025-01-15T00:00:00Z',
      cancelled_at: null,
      cancellation_reason: null,
    },
    {
      id: 'mem2',
      user_id: 'user1',
      plan_name: 'Viking Starter',
      plan_type: 'basic',
      start_date: '2024-06-01',
      end_date: '2025-01-14',
      duration_months: 6,
      status: 'expired',
      amount: 39.99,
      currency: 'USD',
      payment_method: 'credit_card',
      payment_status: 'paid',
      renewal_type: 'monthly',
      auto_renew: false,
      next_billing_date: null,
      class_limit: 12,
      created_at: '2024-06-01T00:00:00Z',
      cancelled_at: null,
      cancellation_reason: null,
    },
    {
      id: 'mem3',
      user_id: 'user1',
      plan_name: 'Trial Membership',
      plan_type: 'trial',
      start_date: '2024-05-15',
      end_date: '2024-05-31',
      duration_months: 1,
      status: 'completed',
      amount: 0,
      currency: 'USD',
      payment_method: 'free',
      payment_status: 'paid',
      renewal_type: 'one_time',
      auto_renew: false,
      next_billing_date: null,
      class_limit: 5,
      created_at: '2024-05-15T00:00:00Z',
      cancelled_at: null,
      cancellation_reason: null,
    },
  ],
  user2: [
    {
      id: 'mem4',
      user_id: 'user2',
      plan_name: 'Monthly Unlimited',
      plan_type: 'premium',
      start_date: '2023-03-20',
      end_date: null,
      duration_months: null,
      status: 'active',
      amount: 69.99,
      currency: 'USD',
      payment_method: 'debit_card',
      payment_status: 'paid',
      renewal_type: 'monthly',
      auto_renew: true,
      next_billing_date: '2025-11-20',
      class_limit: null,
      created_at: '2023-03-20T00:00:00Z',
      cancelled_at: null,
      cancellation_reason: null,
    },
  ],
};

// API Routes

// QR Code validation endpoint
app.post('/api/qr/validate', (req, res) => {
  const { qrData } = req.body;

  // Mock validation logic
  const isValid = qrData && (typeof qrData === 'object' || typeof qrData === 'string');

  if (isValid) {
    const user = mockUsers[0]; // Return first mock user
    res.json({
      isValid: true,
      user: user,
      message: 'QR code validated successfully',
    });
  } else {
    res.json({
      isValid: false,
      error: 'Invalid QR code format',
    });
  }
});

// User authentication endpoints
app.post('/api/auth/signin', (req, res) => {
  const { email, password } = req.body;

  const user = mockUsers.find((u) => u.email === email);
  if (user && password) {
    res.json({
      user: user,
      session: { access_token: 'mock_token_' + Date.now() },
    });
  } else {
    res.status(400).json({ error: 'Invalid credentials' });
  }
});

app.post('/api/auth/signup', (req, res) => {
  const userData = req.body;
  const newUser = {
    id: `user${Date.now()}`,
    ...userData,
    joinDate: new Date().toISOString(),
    isActive: true,
  };

  mockUsers.push(newUser);
  res.json({
    user: newUser,
    session: { access_token: 'mock_token_' + Date.now() },
  });
});

// User profile endpoints
app.get('/api/users/:id', (req, res) => {
  const user = mockUsers.find((u) => u.id === req.params.id);
  if (user) {
    res.json(user);
  } else {
    res.status(404).json({ error: 'User not found' });
  }
});

app.put('/api/users/:id', (req, res) => {
  const userIndex = mockUsers.findIndex((u) => u.id === req.params.id);
  if (userIndex !== -1) {
    mockUsers[userIndex] = { ...mockUsers[userIndex], ...req.body };
    res.json(mockUsers[userIndex]);
  } else {
    res.status(404).json({ error: 'User not found' });
  }
});

// Check-in endpoints
app.post('/api/checkins', (req, res) => {
  const checkIn = {
    id: `checkin${Date.now()}`,
    ...req.body,
    timestamp: new Date().toISOString(),
  };

  mockCheckIns.push(checkIn);
  res.json(checkIn);
});

app.get('/api/checkins', (req, res) => {
  res.json(mockCheckIns);
});

// Email verification endpoints
app.post('/api/email/verify', (req, res) => {
  const { token } = req.body;

  // Mock verification - in production, this would check the database
  if (token && token.length > 0) {
    res.json({
      success: true,
      message: 'Email verified successfully',
      userId: 'mock_user_id',
    });
  } else {
    res.status(400).json({
      success: false,
      message: 'Invalid verification token',
    });
  }
});

app.post('/api/email/resend', (req, res) => {
  const { userId, email } = req.body;

  // Mock resend - in production, this would generate a new token and send email
  if (userId && email) {
    res.json({
      success: true,
      message: 'Verification email resent successfully',
    });
  } else {
    res.status(400).json({
      success: false,
      message: 'User ID and email are required',
    });
  }
});

// Health check endpoint
app.get('/api/health', (req, res) => {
  res.json({
    status: 'OK',
    message: 'Viking Hammer API is running',
    timestamp: new Date().toISOString(),
  });
});

// Placeholder image endpoint
app.get('/api/placeholder/:width/:height', (req, res) => {
  const { width, height } = req.params;
  // Redirect to a placeholder image service
  res.redirect(`https://via.placeholder.com/${width}x${height}/0b5eff/ffffff?text=VH`);
});

// Get membership history for a user
app.get('/api/users/:userId/membership-history', (req, res) => {
  const { userId } = req.params;

  console.log(`📋 Fetching membership history for user: ${userId}`);

  const history = mockMembershipHistory[userId] || [];

  res.json({
    success: true,
    data: history,
    count: history.length,
  });
});

// Get active membership for a user
app.get('/api/users/:userId/active-membership', (req, res) => {
  const { userId } = req.params;

  console.log(`✅ Fetching active membership for user: ${userId}`);

  const history = mockMembershipHistory[userId] || [];
  const activeMembership = history.find((m) => m.status === 'active');

  res.json({
    success: true,
    data: activeMembership || null,
  });
});

// Create new membership record
app.post('/api/membership-history', (req, res) => {
  const membershipData = req.body;

  console.log(`➕ Creating new membership record:`, membershipData);

  const newMembership = {
    id: `mem_${Date.now()}`,
    ...membershipData,
    created_at: new Date().toISOString(),
  };

  if (!mockMembershipHistory[membershipData.user_id]) {
    mockMembershipHistory[membershipData.user_id] = [];
  }

  mockMembershipHistory[membershipData.user_id].unshift(newMembership);

  res.json({
    success: true,
    id: newMembership.id,
    data: newMembership,
  });
});

// Update membership status
app.put('/api/membership-history/:membershipId/status', (req, res) => {
  const { membershipId } = req.params;
  const { status, cancelled_by, cancellation_reason } = req.body;

  console.log(`🔄 Updating membership status: ${membershipId} to ${status}`);

  let found = false;

  for (const userId in mockMembershipHistory) {
    const membership = mockMembershipHistory[userId].find((m) => m.id === membershipId);
    if (membership) {
      membership.status = status;
      if (status === 'cancelled') {
        membership.cancelled_at = new Date().toISOString();
        membership.cancelled_by = cancelled_by;
        membership.cancellation_reason = cancellation_reason;
      }
      found = true;
      break;
    }
  }

  res.json({
    success: found,
    message: found ? 'Membership status updated' : 'Membership not found',
  });
});

// ==================== CLASSES, INSTRUCTORS & SCHEDULE MANAGEMENT ====================

// Mock data for classes
let mockClasses = [
  {
    id: 'class1',
    name: 'HIIT Cardio Blast',
    description: 'High-intensity interval training for maximum calorie burn',
    duration: 45,
    maxCapacity: 20,
    currentEnrollment: 15,
    instructors: ['inst1'],
    schedule: [
      { dayOfWeek: 1, startTime: '09:00', endTime: '09:45' },
      { dayOfWeek: 3, startTime: '09:00', endTime: '09:45' },
      { dayOfWeek: 5, startTime: '09:00', endTime: '09:45' }
    ],
    equipment: ['Dumbbells', 'Kettlebells', 'Jump Rope'],
    difficulty: 'Intermediate',
    category: 'Cardio',
    price: 25,
    status: 'active'
  },
  {
    id: 'class2',
    name: 'Strength Training Pro',
    description: 'Build muscle and increase strength with professional guidance',
    duration: 60,
    maxCapacity: 15,
    currentEnrollment: 12,
    instructors: ['inst2'],
    schedule: [
      { dayOfWeek: 2, startTime: '10:00', endTime: '11:00' },
      { dayOfWeek: 4, startTime: '10:00', endTime: '11:00' }
    ],
    equipment: ['Barbells', 'Bench', 'Squat Rack'],
    difficulty: 'Advanced',
    category: 'Strength',
    price: 30,
    status: 'active'
  }
];

// Mock data for instructors
let mockInstructors = [
  {
    id: 'inst1',
    name: 'Sarah Johnson',
    email: 'sarah.j@vikinggym.com',
    specialization: ['Yoga', 'Pilates', 'Flexibility'],
    availability: ['Monday', 'Wednesday', 'Friday'],
    rating: 4.8,
    experience: 5,
    phone: '+994501234567',
    status: 'active'
  },
  {
    id: 'inst2',
    name: 'Mike Thompson',
    email: 'mike.t@vikinggym.com',
    specialization: ['Strength Training', 'CrossFit', 'Olympic Lifting'],
    availability: ['Tuesday', 'Thursday', 'Saturday'],
    rating: 4.9,
    experience: 8,
    phone: '+994501234568',
    status: 'active'
  }
];

// Mock data for schedule slots
let mockScheduleSlots = [
  {
    id: 'slot1',
    classId: 'class1',
    instructorId: 'inst1',
    dayOfWeek: 1,
    startTime: '09:00',
    endTime: '09:45',
    date: '2025-10-20',
    enrolledMembers: ['user1', 'user2'],
    status: 'scheduled'
  },
  {
    id: 'slot2',
    classId: 'class2',
    instructorId: 'inst2',
    dayOfWeek: 2,
    startTime: '10:00',
    endTime: '11:00',
    date: '2025-10-21',
    enrolledMembers: ['user1'],
    status: 'scheduled'
  }
];

// ========== CLASSES API ENDPOINTS ==========

// GET all classes
app.get('/api/classes', (req, res) => {
  res.json({
    success: true,
    data: mockClasses
  });
});

// GET single class
app.get('/api/classes/:id', (req, res) => {
  const gymClass = mockClasses.find(c => c.id === req.params.id);
  if (gymClass) {
    res.json({ success: true, data: gymClass });
  } else {
    res.status(404).json({ success: false, message: 'Class not found' });
  }
});

// POST create new class
app.post('/api/classes', (req, res) => {
  const newClass = {
    id: `class${Date.now()}`,
    ...req.body,
    currentEnrollment: 0,
    status: req.body.status || 'active'
  };
  mockClasses.push(newClass);
  res.json({
    success: true,
    message: 'Class created successfully',
    data: newClass
  });
});

// PUT update class
app.put('/api/classes/:id', (req, res) => {
  const index = mockClasses.findIndex(c => c.id === req.params.id);
  if (index !== -1) {
    mockClasses[index] = { ...mockClasses[index], ...req.body };
    res.json({
      success: true,
      message: 'Class updated successfully',
      data: mockClasses[index]
    });
  } else {
    res.status(404).json({ success: false, message: 'Class not found' });
  }
});

// DELETE class
app.delete('/api/classes/:id', (req, res) => {
  const index = mockClasses.findIndex(c => c.id === req.params.id);
  if (index !== -1) {
    mockClasses.splice(index, 1);
    res.json({ success: true, message: 'Class deleted successfully' });
  } else {
    res.status(404).json({ success: false, message: 'Class not found' });
  }
});

// ========== INSTRUCTORS API ENDPOINTS ==========

// GET all instructors
app.get('/api/instructors', (req, res) => {
  res.json({
    success: true,
    data: mockInstructors
  });
});

// GET single instructor
app.get('/api/instructors/:id', (req, res) => {
  const instructor = mockInstructors.find(i => i.id === req.params.id);
  if (instructor) {
    res.json({ success: true, data: instructor });
  } else {
    res.status(404).json({ success: false, message: 'Instructor not found' });
  }
});

// POST create new instructor
app.post('/api/instructors', (req, res) => {
  const newInstructor = {
    id: `inst${Date.now()}`,
    ...req.body,
    rating: 0,
    status: req.body.status || 'active'
  };
  mockInstructors.push(newInstructor);
  res.json({
    success: true,
    message: 'Instructor created successfully',
    data: newInstructor
  });
});

// PUT update instructor
app.put('/api/instructors/:id', (req, res) => {
  const index = mockInstructors.findIndex(i => i.id === req.params.id);
  if (index !== -1) {
    mockInstructors[index] = { ...mockInstructors[index], ...req.body };
    res.json({
      success: true,
      message: 'Instructor updated successfully',
      data: mockInstructors[index]
    });
  } else {
    res.status(404).json({ success: false, message: 'Instructor not found' });
  }
});

// DELETE instructor
app.delete('/api/instructors/:id', (req, res) => {
  const index = mockInstructors.findIndex(i => i.id === req.params.id);
  if (index !== -1) {
    mockInstructors.splice(index, 1);
    res.json({ success: true, message: 'Instructor deleted successfully' });
  } else {
    res.status(404).json({ success: false, message: 'Instructor not found' });
  }
});

// ========== SCHEDULE API ENDPOINTS ==========

// GET all schedule slots
app.get('/api/schedule', (req, res) => {
  const { date, classId, instructorId } = req.query;
  let filteredSlots = mockScheduleSlots;
  
  if (date) {
    filteredSlots = filteredSlots.filter(slot => slot.date === date);
  }
  if (classId) {
    filteredSlots = filteredSlots.filter(slot => slot.classId === classId);
  }
  if (instructorId) {
    filteredSlots = filteredSlots.filter(slot => slot.instructorId === instructorId);
  }
  
  res.json({
    success: true,
    data: filteredSlots
  });
});

// GET weekly schedule
app.get('/api/schedule/weekly', (req, res) => {
  const { startDate } = req.query;
  // Group slots by day of week
  const weeklySchedule = {
    0: [], // Sunday
    1: [], // Monday
    2: [], // Tuesday
    3: [], // Wednesday
    4: [], // Thursday
    5: [], // Friday
    6: []  // Saturday
  };
  
  mockScheduleSlots.forEach(slot => {
    weeklySchedule[slot.dayOfWeek].push(slot);
  });
  
  res.json({
    success: true,
    data: weeklySchedule
  });
});

// POST create schedule slot
app.post('/api/schedule', (req, res) => {
  const newSlot = {
    id: `slot${Date.now()}`,
    ...req.body,
    enrolledMembers: [],
    status: req.body.status || 'scheduled'
  };
  mockScheduleSlots.push(newSlot);
  res.json({
    success: true,
    message: 'Schedule slot created successfully',
    data: newSlot
  });
});

// PUT update schedule slot
app.put('/api/schedule/:id', (req, res) => {
  const index = mockScheduleSlots.findIndex(s => s.id === req.params.id);
  if (index !== -1) {
    mockScheduleSlots[index] = { ...mockScheduleSlots[index], ...req.body };
    res.json({
      success: true,
      message: 'Schedule slot updated successfully',
      data: mockScheduleSlots[index]
    });
  } else {
    res.status(404).json({ success: false, message: 'Schedule slot not found' });
  }
});

// DELETE schedule slot
app.delete('/api/schedule/:id', (req, res) => {
  const index = mockScheduleSlots.findIndex(s => s.id === req.params.id);
  if (index !== -1) {
    mockScheduleSlots.splice(index, 1);
    res.json({ success: true, message: 'Schedule slot deleted successfully' });
  } else {
    res.status(404).json({ success: false, message: 'Schedule slot not found' });
  }
});

// POST enroll member in a schedule slot
app.post('/api/schedule/:id/enroll', (req, res) => {
  const { memberId } = req.body;
  const slot = mockScheduleSlots.find(s => s.id === req.params.id);
  
  if (!slot) {
    return res.status(404).json({ success: false, message: 'Schedule slot not found' });
  }
  
  const gymClass = mockClasses.find(c => c.id === slot.classId);
  if (!gymClass) {
    return res.status(404).json({ success: false, message: 'Class not found' });
  }
  
  if (slot.enrolledMembers.length >= gymClass.maxCapacity) {
    return res.status(400).json({ success: false, message: 'Class is full' });
  }
  
  if (!slot.enrolledMembers.includes(memberId)) {
    slot.enrolledMembers.push(memberId);
    gymClass.currentEnrollment++;
  }
  
  res.json({
    success: true,
    message: 'Member enrolled successfully',
    data: slot
  });
});

// POST book a class (simplified booking by classId, creates/finds slot)
app.post('/api/classes/:classId/book', (req, res) => {
  const { memberId, date, time } = req.body;
  const gymClass = mockClasses.find(c => c.id === req.params.classId);
  
  if (!gymClass) {
    return res.status(404).json({ success: false, message: 'Class not found' });
  }
  
  if (gymClass.status !== 'active') {
    return res.status(400).json({ success: false, message: 'Class is not available for booking' });
  }
  
  // Check if class is full
  if (gymClass.currentEnrollment >= gymClass.maxCapacity) {
    return res.status(400).json({ success: false, message: 'Class is full' });
  }
  
  // Find or create schedule slot for this date/time
  let slot = mockScheduleSlots.find(s => 
    s.classId === req.params.classId && 
    s.date === date && 
    s.startTime === time
  );
  
  if (!slot) {
    // Create new slot
    const scheduleInfo = gymClass.schedule.find(s => s.startTime === time);
    slot = {
      id: `slot${Date.now()}`,
      classId: req.params.classId,
      instructorId: gymClass.instructors[0],
      dayOfWeek: new Date(date).getDay(),
      startTime: time,
      endTime: scheduleInfo?.endTime || time,
      date: date,
      enrolledMembers: [],
      status: 'scheduled'
    };
    mockScheduleSlots.push(slot);
  }
  
  // Check if member already enrolled
  if (slot.enrolledMembers.includes(memberId)) {
    return res.json({
      success: true,
      message: 'Already enrolled in this class',
      data: { slot, gymClass, alreadyEnrolled: true }
    });
  }
  
  // Enroll member
  slot.enrolledMembers.push(memberId);
  gymClass.currentEnrollment++;
  
  // Update class status if full
  if (gymClass.currentEnrollment >= gymClass.maxCapacity) {
    gymClass.status = 'full';
  }
  
  res.json({
    success: true,
    message: 'Successfully booked class',
    data: { slot, gymClass }
  });
});

// POST cancel/unenroll from a class
app.post('/api/classes/:classId/cancel', (req, res) => {
  const { memberId, date, time } = req.body;
  const gymClass = mockClasses.find(c => c.id === req.params.classId);
  
  if (!gymClass) {
    return res.status(404).json({ success: false, message: 'Class not found' });
  }
  
  // Find schedule slot
  const slot = mockScheduleSlots.find(s => 
    s.classId === req.params.classId && 
    s.date === date && 
    s.startTime === time
  );
  
  if (!slot) {
    return res.status(404).json({ success: false, message: 'Booking not found' });
  }
  
  // Remove member from enrollment
  const memberIndex = slot.enrolledMembers.indexOf(memberId);
  if (memberIndex > -1) {
    slot.enrolledMembers.splice(memberIndex, 1);
    gymClass.currentEnrollment--;
    
    // Update class status if no longer full
    if (gymClass.currentEnrollment < gymClass.maxCapacity && gymClass.status === 'full') {
      gymClass.status = 'active';
    }
  }
  
  res.json({
    success: true,
    message: 'Booking cancelled successfully',
    data: { slot, gymClass }
  });
});

// GET member's bookings
app.get('/api/members/:memberId/bookings', (req, res) => {
  const memberId = req.params.memberId;
  
  // Find all slots where member is enrolled
  const memberBookings = mockScheduleSlots
    .filter(slot => slot.enrolledMembers.includes(memberId))
    .map(slot => {
      const gymClass = mockClasses.find(c => c.id === slot.classId);
      const instructor = mockInstructors.find(i => i.id === slot.instructorId);
      return {
        ...slot,
        className: gymClass?.name,
        classDescription: gymClass?.description,
        instructorName: instructor?.name,
        maxCapacity: gymClass?.maxCapacity,
        currentEnrollment: slot.enrolledMembers.length
      };
    });
  
  res.json({
    success: true,
    data: memberBookings
  });
});

// ==================== END CLASSES, INSTRUCTORS & SCHEDULE ====================

// Start server
app.listen(PORT, () => {
  console.log(`🚀 Viking Hammer Backend API running on http://localhost:${PORT}`);
  console.log(`📱 Frontend (Vite) default: http://localhost:5173`);
  console.log(`🔍 API Health Check: http://localhost:${PORT}/api/health`);
  console.log('');
  console.log('Available API Endpoints:');
  console.log('  POST /api/qr/validate - Validate QR codes');
  console.log('  POST /api/auth/signin - User sign in');
  console.log('  POST /api/auth/signup - User sign up');
  console.log('  GET  /api/users/:id - Get user profile');
  console.log('  PUT  /api/users/:id - Update user profile');
  console.log('  POST /api/checkins - Record check-in');
  console.log('  GET  /api/checkins - Get check-ins');
  console.log('  POST /api/email/verify - Verify email with token');
  console.log('  POST /api/email/resend - Resend verification email');
  console.log('  GET  /api/users/:userId/membership-history - Get membership history');
  console.log('  GET  /api/users/:userId/active-membership - Get active membership');
  console.log('  POST /api/membership-history - Create membership record');
  console.log('  PUT  /api/membership-history/:id/status - Update membership status');
  console.log('  GET  /api/classes - Get all classes');
  console.log('  POST /api/classes - Create new class');
  console.log('  PUT  /api/classes/:id - Update class');
  console.log('  DELETE /api/classes/:id - Delete class');
  console.log('  GET  /api/instructors - Get all instructors');
  console.log('  POST /api/instructors - Create new instructor');
  console.log('  PUT  /api/instructors/:id - Update instructor');
  console.log('  DELETE /api/instructors/:id - Delete instructor');
  console.log('  GET  /api/schedule - Get schedule slots');
  console.log('  GET  /api/schedule/weekly - Get weekly schedule');
  console.log('  POST /api/schedule - Create schedule slot');
  console.log('  PUT  /api/schedule/:id - Update schedule slot');
  console.log('  DELETE /api/schedule/:id - Delete schedule slot');
  console.log('  POST /api/schedule/:id/enroll - Enroll member in slot');
  console.log('  GET  /api/health - Health check');
});

module.exports = app;
